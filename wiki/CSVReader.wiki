#summary A simple example that shows how to map CSV entries to java objects

= Introduction =

Consider you have the following CSV file:
{{{
Holger;Schmidt;35
Max;Mustermann;17
Lisa;Stein;19
}}}
Each line represents a person. Each person has a first name, a last name and an age. Nothing exciting this far... 

It is very easy to parse this csv file using jCSV. It comes with a fully configured CSVReader that does (mostly) all of the work.

== Parse the data as a String[] array ==
A straightforward approach would be to read the file line by line. Each line would be split at ';', so we would receive an String[] array containing the three data parts.

The default CSVParser configuration follows this approach, you can obtain this parser using the static factory method `CSVReaderBuilder.newDefaultReader(Reader reader)`.

An example code might look like this:
{{{
Reader reader = new FileReader("persons.csv");

CSVReader<String[]> csvPersonReader = CSVReaderBuilder.newDefaultReader(reader);
List<String[]> persons = csvPersonReader.readAll();
}}}
You see, it's quite easy to read a CSV file and use the data in your program.

However, using a List of String[] arrays is not very handy ;)

=== Create Java objects ===

It would be a lot easier to use a List of Persons in your program. jCSV can convert each row into a java object.

The corrensponding (immutable) Person class may look like this:
{{{
public class Person {
        // ... private variable declarations

	public Person(String firstname, String lastname, int age) {
		this.firstname = firstname;
		this.lastname = lastname;
		this.age = age;
	}
       
        // ... getter, equals, toString
}
}}}

All we have to do is to tell jCSV how to convert a row from the csv file into a Person object. For this purpose exists an interface called CSVEntryParser:
{{{
public interface CSVEntryParser<E> {
	public E parseEntry(String... data);
}
}}}

The method `parseEntry` converts a String[] array to an object of the class E, E will be Person in our example. So all we have to do, is to provide an appropiate CSVEntryParser, a straightforward implementation might look like this:
{{{
public class PersonEntryParser implements CSVEntryParser<Person> {
	public Person parseEntry(String... data) {
		String firstname = data[0];
		String lastname = data[1];
		int age = Integer.parseInt(data[2]);

		return new Person(firstname, lastname, age);
	}
}
}}}

Once you have written this entry parser, you can use the CSVReaderBuilder to provide your CSVEntryParser implementation:
{{{
Reader reader = new FileReader("persons.csv");

CSVReader<Person> csvPersonReader = new CSVReaderBuilder<Person>(reader).entryParser(new PersonEntryParser()).build();
List<Person> persons = csvPersonReader.readAll();
}}}

That's it, you have completely parsed a csv file in just 4 lines!

=== Incremental reading ===
If you have a large csv file, you possibly can not read the whole csv file into your memory. Therefore, there is the possbility to incrementaly read the records of the file.

The CSVReader interfaces extends the Iterable interface, so you can simply iterate over the records using an Iterator:
{{{
Iterator<Person> it = csvPersonReader.iterator();
while (it.hasNext()) {
	Person p = it.next();
	// ...
}
}}}

Another option is to use the for each loop:
{{{
for (Person p : csvPersonReader) {
	/// ...
}
}}}