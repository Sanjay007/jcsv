#summary A simple example that shows how to map CSV entries to java objects

= Introduction =

Consider you have the following CSV file:
{{{
Holger;Schmidt;35
Heinz;Bach;47
Max;Mustermann;17
Lisa;Stein;19
}}}
Each line represents a person. Each person has a first name, a last name and an age. Nothing special... 

It is very easy to parse this csv file using jCSV. It comes with a fully configured CSVParser that does (mostly) all of the work.

== Parse the data as a String[] array ==
A straightforward approach would be to read the file line by line. Each line would be split at ';', so we would receive an String[] array containing the three data parts.

The default CSVParser configuration follows this approach, we can obtain this parser using the static factory method `CSVParser.newDefaultParser(Reader reader)`.

An example code might look like this:
{{{
Reader reader = new FileReader("persons.csv");

CSVParser<String[]> csvPersonParser = CSVParser.newDefaultParser(reader);
List<String[]> persons = csvPersonParser.parse();
}}}
You see, it's quite easy to read a CSV file and use the data in your program.

However, using a List of String[] arrays is not very handy ;)

== Create Java objects ==

It would be a lot easier to use a List of Persons in our program. jCSV supports to convert each row into a java object.

The corrensponding Person class may look like this:
{{{
public class Person {
        // ... variable declarations

	public Person(String firstname, String lastname, int age) {
		this.firstname = firstname;
		this.lastname = lastname;
		this.age = age;
	}
       
        // ... getter, equals, toString
}
}}}

All we have to do is to tell jCSV how to convert a row from the csv file into a Person object. For this purpose exists an interface called CSVEntryParser:
{{{
public interface CSVEntryParser<E> {
	public E parseEntry(String... data);
}
}}}

The method `parseEntry` converts a String[] array to an object of the class E, E will be Person in our example. So all we have to do, is to provide an appropiate CSVEntryParser, a straightforward implementation might look like this:
{{{
public class PersonEntryParser implements CSVEntryParser<Person> {
	public Person parseEntry(String... data) {
		String firstname = data[0];
		String lastname = data[1];
		int age = Integer.parseInt(data[2]);

		return new Person(firstname, lastname, age);
	}
}
}}}

Once we have written this entry parser, we can us the CSVParser.Builder to provide our CSVEntryParser implementation:
{{{
FileReader csvReader = new FileReader("persons.csv");

CSVParser<Person> csvPersonParser = new CSVParser.Builder<Person>(csvReader).entryParser(new PersonEntryParser()).build();
List<Person> persons = csvPersonParser.parse();
}}}

That's it. :)