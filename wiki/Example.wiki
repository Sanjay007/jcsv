#summary A simple example that shows how to map CSV entries to java objects

= Introduction =

Consider you have the following CSV file:
{{{
#firstname;lastname;age
Holger;Schmidt;35
Heinz;Bach;47
Max;Mustermann;17
Lisa;Stein;19
}}}

Each line represents a person. Furthermore we have a corresponding Person class that may look like this:
{{{
public class Person {
	private final String firstname;
	private final String lastname;
	private final int age;

	public Person(String firstname, String lastname, int age) {
		this.firstname = firstname;
		this.lastname = lastname;
		this.age = age;
	}

	public int getAge() {
		return age;
	}

	public String getFirstname() {
		return firstname;
	}

	public String getLastname() {
		return lastname;
	}

	@Override
	public String toString() {
		return String.format("%s %s %s", firstname, lastname, age);
	}
}
}}}

= Parse the CSV file =

It is very easy to parse the CSV file above and create a List of Person objects. All you have to do, is to tell the CSVParser how to convert a row into a Person. For this purpose exists an interface called CSVEntryParser:
{{{
public interface CSVEntryParser<E> {
	public E parseEntry(String... data);
}
}}}
The method `parseEntry` converts a String[] array to an object of the class E, E will be Person in our example. So all we have to do, is to provide a CSVEntryParser, a straight forward implementation might look like this:
{{{
public class PersonEntryParser implements CSVEntryParser<Person> {
	public Person parseEntry(String... data) {
		String firstname = data[0];
		String lastname = data[1];
		int age = Integer.parseInt(data[2]);

		return new Person(firstname, lastname, age);
	}
}
}}}

Once we have written this entry parser, we can parse our csv file:
{{{
FileReader csvReader = new FileReader("myfile.csv");

CSVParser<Person> csvPersonParser = new CSVParser.Builder<Person>(csvReader).entryParser(new PersonEntryParser()).build();

List<Person> persons = csvPersonParser.parse();
}}}

That's it.